#!/usr/bin/with-contenv bash
set -e

vecho () { if [ "${S6_VERBOSITY:-1}" -gt 0 ]; then echo "[$0] $@"; fi; }

REGISTRY_HTTP_TLS_CERTIFICATE="${REGISTRY_HTTP_TLS_CERTIFICATE:-/data/auth/certificate.crt}";
REGISTRY_HTTP_TLS_KEY="${REGISTRY_HTTP_TLS_KEY:-/data/auth/privatekey.pem}";

vecho "Ensure certificate directory exist.";
mkdir -p \
    $(dirname $REGISTRY_HTTP_TLS_CERTIFICATE) \
    ;

# make sure we have certs
if [ -f ${REGISTRY_HTTP_TLS_KEY} ] && [ -f ${REGISTRY_HTTP_TLS_CERTIFICATE} ];
then
    vecho "Using cert found in ${REGISTRY_HTTP_TLS_CERTIFICATE}";
    vecho "Using key  found in ${REGISTRY_HTTP_TLS_KEY}";
    vecho "Make sure docker-registry configurations have the same path as these.";
else
    SUBJECT="/C=US/ST=NY/L=EXAMPLE/O=EXAMPLE/OU=REGISTRY/CN=localhost/emailAddress=everybodycanseethis@mailinator.com";
    SSLSUBJECT=${SSLSUBJECT:-$SUBJECT};
    vecho "Generating self-signed cert/key in";
    vecho "${REGISTRY_HTTP_TLS_CERTIFICATE} / ${REGISTRY_HTTP_TLS_KEY}";
    vecho "You may want to replace these with your own.";
    openssl req -newkey rsa:4096 -x509 -days 3650 -nodes -out ${REGISTRY_HTTP_TLS_CERTIFICATE} -keyout ${REGISTRY_HTTP_TLS_KEY} -subj "${SSLSUBJECT}";
fi


# trust said certificate
if [ -z "${REGISTRY_SKIP_TRUSTCERT}" ] \
&& [ "X${EUID}" == "X0" ]; # requires root
then
    vecho "Adding certificate to root-certificate store.";
    cp ${REGISTRY_HTTP_TLS_CERTIFICATE} /etc/ssl/certs/ \
    && update-ca-certificates; # requires root
fi;

if [ -z "${REGISTRY_SKIP_PERMFIX}" ] \
&& [ "X${EUID}" == "X0" ]; # requires root
then
    vecho "Fixing permissions.";
    chown ${S6_USER:-alpine}:${PGID:-1000} \
        $(dirname $REGISTRY_HTTP_TLS_CERTIFICATE) \
        $REGISTRY_HTTP_TLS_CERTIFICATE \
        $REGISTRY_HTTP_TLS_KEY \
        ;
fi;

# make sure we have basic auth at the least
if [ -n "${REGISTRY_AUTH_HTPASSWD_PATH}" ];
then
    mkdir -p \
        $(dirname $REGISTRY_AUTH_HTPASSWD_PATH) \
        ;
    if [ -f "${REGISTRY_AUTH_HTPASSWD_PATH}" ];
    then
        vecho "using credentials found in ${REGISTRY_AUTH_HTPASSWD_PATH}";
    elif [ -n "${REG_USER}" ] && [ -n "${REG_PASS}" ];
    then
        vecho "generating htpasswd authentication in ${REGISTRY_AUTH_HTPASSWD_PATH}";
        vecho "adding credentials for: ${REG_USER}";
        htpasswd -bcB ${REGISTRY_AUTH_HTPASSWD_PATH} ${REG_USER} ${REG_PASS}
    fi;
    if [ -f "${REGISTRY_AUTH_HTPASSWD_PATH}" ] \
    && [ "X${EUID}" == "X0" ]; # requires root
    then
        chown ${S6_USER:-alpine}:${S6_USER:-alpine} \
            $(dirname $REGISTRY_AUTH_HTPASSWD_PATH) \
            $REGISTRY_AUTH_HTPASSWD_PATH \
            ;
        chmod 400 $REGISTRY_AUTH_HTPASSWD_PATH;
    fi;
fi;

